[tool.poetry]
name = "fire-forecast"
version = "0.2.0"
description = "A script to scrape the australian bom's site for fire danger ratings, and the storm prediction center's fire weather outlook and generate maps"
authors = ["erwlmsly <135661844+erwlmsly@users.noreply.github.com>"]
readme = "README.md"
package-mode = false

[tool.poetry.dependencies]
python = "^3.12"
requests = "^2.32.3"
pydantic-settings = "^2.7.0"
matplotlib = "^3.9.4"
cartopy = "^0.24.1"
geopandas = "^1.0.1"
contextily = "^1.6.2"
scipy = "^1.14.1"
pandas = "^2.2.3"
beautifulsoup4 = "^4.12.3"
lxml = "^5.3.0"
folium = "^0.19.5"
mapclassify = "^2.8.1"
pandas-stubs = "^2.2.3.250308"
types-beautifulsoup4 = "^4.12.0.20250204"
httpx = "^0.28.1"
types-shapely = "^2.0.0.20250202"
html5lib = "^1.1"

[tool.poetry.group.dev.dependencies]
black = "^24.3.0"
ruff = "^0.3.7"


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
# Enable pycodestyle (`E`) and Pyflakes (`F`) codes by default.
lint.select = [
    "A",    # builtins
    "B",    # bugbear
    "C",    # flake8-comprehensions
    "DTZ",  # datetime checks, mostly for UTC
    "E",    # pycodestyle errors
    "ERA",  # Eradicate (commented out code)
    "F",    # pyflakes
    "FLY",  # flynt (enforce f-strings)
    "G",    # logging format
    "I",    # isort
    "NPY",  # numpy
    "PERF", # Perflint
    "PGH",  # pygrep-hooks
    "PIE",  # misc lints
    "PT",   # pytest linting
    "RET",  # Return
    "RUF",  # Ruff-specific rules
    "S",    # Bandit security
    "SIM",  # Simplify
    "W",    # pycodestyle warnings
    ]

lint.ignore = [
    "E501",   # Ignore line length errors, Black will handle formatting and long comments/strings are ok
    "B008",
    "DTZ002",
    "DTZ005",
    "DTZ007",
    "E711",
    "E712",
    "S101"    # Ignore assert checks for tests
    ]

lint.extend-select = ["C4", "SIM"]

# Allow autofix for all enabled rules (when `--fix`) is provided.
lint.fixable = [
    "A",
    "B",
    "C",
    "D",
    "E",
    "F",
    "G",
    "I",
    "N",
    "Q",
    "S",
    "T",
    "W",
    "ANN",
    "ARG",
    "BLE",
    "COM",
    "DJ",
    "DTZ",
    "EM",
    "ERA",
    "EXE",
    "FBT",
    "ICN",
    "INP",
    "ISC",
    "NPY",
    "PD",
    "PGH",
    "PIE",
    "PL",
    "PT",
    "PTH",
    "PYI",
    "RET",
    "RSE",
    "RUF",
    "SIM",
    "SLF",
    "TCH",
    "TID",
    "TRY",
    "UP",
    "YTT",
    "SIM",
    ]   
lint.unfixable = []
show-fixes = true

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    ]
lint.per-file-ignores = {}

# Allow unused variables when underscore-prefixed.
lint.dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Assume Python 3.11.
target-version = "py311"

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = false
mark-parentheses = false

[tool.ruff.lint.mccabe]
# Unlike Flake8, default to a complexity level of 12.
max-complexity = 10

[tool.ruff.lint.isort]
known-first-party = [
    "authorization",
    "common",
    "database",
    "environment",
    "features",
    "logger",
    "main",
    "route_prefix",
    "route_tag",
    ]